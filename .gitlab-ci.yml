stages:
  - create-env
  - frontend-build
  - docker-build
  - docker-pull

variables:
  DOCKER_COMPOSE_FILE: docker-compose.yml

create-env:
  stage: create-env
  script:
    #    - echo "NEXT_SHARP_PATH = ${NEXT_SHARP_PATH}" >> .env
    #    - echo "NEXT_PUBLIC_SERVER_URL = ${NEXT_PUBLIC_SERVER_URL}" >> .env
    #    - echo "NEXT_PUBLIC_KAKAO_REST_KEY = ${NEXT_PUBLIC_KAKAO_REST_KEY}" >> .env
    #    - echo "NEXT_PUBLIC_KAKAO_JS_KEY = ${NEXT_PUBLIC_KAKAO_JS_KEY}" >> .env
    #    - echo "NEXT_PUBLIC_KAKAO_LOGIN_REDIRECT_URI = ${NEXT_PUBLIC_KAKAO_LOGIN_REDIRECT_URI}" >> .env
    #    - echo "NEXT_PUBLIC_KAKAO_INTEGRITY_KEY = ${NEXT_PUBLIC_KAKAO_INTEGRITY_KEY}" >> .env
    #    - echo "NODE_ENV = ${NODE_ENV}" >> .env
    - echo "DOCKER_USERNAME = ${DOCKER_USERNAME}" >> .env
    - echo "DOCKER_REPO = ${DOCKER_REPO}" >> .env
  artifacts:
    paths:
      - .env
  only:
    - frontend-deploy

frontend-build:
  stage: frontend-build
  image: node:18-alpine
  script:
    - cd frontend
    - npm install
    - npm run build
  #    - npm install -g pnpm
  #    - pnpm install --production=false
  #    - pnpm build
  artifacts:
    paths:
      - frontend/dist
  #      - frontend/.next/standalone
  #      - frontend/public
  #      - frontend/.next/static
  only:
    - frontend-deploy

docker-build:
  stage: docker-build
  dependencies:
    - create-env
    - frontend-build
  script:
    # image removal
    - docker rmi ${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest || true
    # login
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    # frontend push
    - cd frontend
    - docker build -t ${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest -f Dockerfile .
    - docker push ${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest
  only:
    - frontend-deploy

docker-pull:
  stage: docker-pull
  script:
    # login again
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    # container removal
    - docker stop $(docker ps -q --filter ancestor=${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest) || true
    - docker rm $(docker ps -aq --filter ancestor=${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest) || true
    - docker-compose -f $DOCKER_COMPOSE_FILE down || true
    - docker rmi $(docker images -q ${DOCKER_USERNAME}/${DOCKER_REPO}:frontend-latest) || true
    # deploy
    - docker-compose -f $DOCKER_COMPOSE_FILE pull
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - docker image prune -f
  only:
    - frontend-deploy
